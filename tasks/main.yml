---

- import_role:
    name: 'secret'

- name: Check age of the target path
  stat:
    path: '{{ dotfiles__target_path }}'
  register: dotfiles__register_stat_target_path

- name: Get current time
  command: date '+%s'
  changed_when: False
  register: dotfiles__register_date_unix_epoch

- name: Create tar archive on the Ansible controller
  command: tar --create --gzip {{ "" if (dotfiles__include_vcs|bool) else "--exclude-vcs" }} --file "{{ dotfiles__temp_tar_file }}" --directory "{{ dotfiles__source_path }}" .
  args:
    warn: False
  #   creates: '{{ dotfiles__temp_tar_file }}'
  become: False
  delegate_to: 'localhost'
  run_once: True
  when: dotfiles_do_update|bool and dotfiles__copy_mode == 'tar'
  tags: [ 'role::dotfiles:install' ]

- name: Remove old dotfiles to ensure clean unarchive
  file:
    dest: '{{ dotfiles__target_path }}'
    state: 'absent'
  when: dotfiles_do_update|bool and dotfiles__copy_mode == 'tar'
  tags: [ 'role::dotfiles:install' ]

- name: Create target directory
  file:
    dest: '{{ dotfiles__target_path }}'
    state: 'directory'
  when: dotfiles_do_update|bool and dotfiles__copy_mode == 'tar'
  tags: [ 'role::dotfiles:install' ]

- name: Extract tar archive
  unarchive:
    src:  '{{ dotfiles__temp_tar_file }}'
    dest: '{{ dotfiles__target_path }}'
    copy: True
  when: dotfiles_do_update|bool and dotfiles__copy_mode == 'tar' and not ansible_check_mode
  register: dotfiles__register_archive_extract
  tags: [ 'role::dotfiles:install' ]

- name: Copy over dotfiles
  copy:
    src:  '{{ dotfiles__source_path }}'
    dest: '{{ dotfiles__target_path }}'
  when: dotfiles_do_update|bool and dotfiles__copy_mode != 'tar'
  tags: [ 'role::dotfiles:install' ]

- name: Fix git remote address
  replace:
    dest: '{{ dotfiles__target_path + "/.git/config" }}'
    regexp: '{{ "url = git@ypid.github.com:ypid/dotfiles.git" | regex_escape() }}'
    replace: 'url = {{ dotfiles__source_url }}'
  when: not ansible_check_mode and dotfiles__include_vcs|bool

- name: Set permissions for dotfiles
  file:
    path: '{{ dotfiles__target_path }}'
    state: 'directory'
    recurse: yes
    owner: root
    group: root
    mode: 'u=rwX,g=rX,o=rX'
  when: dotfiles_do_update|bool
  tags: [ 'role::dotfiles:install' ]

- name: Ensure parent directories for dotfiles exist
  file:
    dest: '{{ ("~/" + dotfiles__home_location) | dirname }}'
    state: 'directory'
  become_user: '{{ item.user|d(item.name) }}'
  no_log: '{{ dotfiles__no_log | bool }}'
  when: (item.name|d() and item.state|d('present') != 'absent')
  with_items: '{{ dotfiles__users_combined }}'

- name: Create symbolic link to dotfiles
  file:
    src: '{{ dotfiles__target_path }}'
    dest: '{{ "~/" + dotfiles__home_location }}'
    state: 'link'
  become_user: '{{ item.user|d(item.name) }}'
  when: (item.name|d() and item.state|d('present') != 'absent') and not ansible_check_mode
  no_log: '{{ dotfiles__no_log | bool }}'
  register: dotfiles__register_create_symlink
  failed_when: (dotfiles__register_create_symlink.failed|bool) and (
                (item.dotfiles_fail_on_existing_dir|d(True)|bool) or (
                (not item.dotfiles_fail_on_existing_dir|d(True)|bool) and
                ('refusing to convert from directory to symlink for' not in dotfiles__register_create_symlink.msg)
               ))
  with_items: '{{ dotfiles__users_combined }}'

- name: Enable dotfiles
  command: ./install
  args:
    chdir: '{{ "~/" + dotfiles__home_location }}'
  become_user: '{{ (item.user|d(item.name)) }}'
  register: dotfiles__register_enable
  changed_when: ('Creating' in dotfiles__register_enable.stdout)
  # Ignore "Some tasks were not executed successfully" for now.
  failed_when: (dotfiles__register_enable.rc != 0 and not
                ('Some tasks were not executed successfully' in dotfiles__register_enable.stdout)
               )
  no_log: '{{ dotfiles__no_log | bool }}'
  when: (dotfiles__register_archive_extract is not skipped) and dotfiles__users_enabled|bool and (dotfiles_do_update|bool or dotfiles__register_archive_extract is changed)
  with_items: '{{ dotfiles__users_combined }}'
  tags: [ 'role::dotfiles:enable' ]
