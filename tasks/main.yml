---

- name: Check age of the target path
  stat:
    path: '{{ dotfiles__target_path }}'
  register: dotfiles__register_stat_target_path

- name: Set variables
  set_fact:
    dotfiles__users_combined: '{{
      (dotfiles__users_role  | list) +
      (dotfiles__users       | list) +
      (dotfiles__group_users | list) +
      (dotfiles__host_users  | list) }}'
    dotfiles_do_update: '{{
      (not dotfiles__register_stat_target_path.stat.exists) or
      (dotfiles__update|bool and
        ((ansible_date_time.epoch|int) - (dotfiles__register_stat_target_path.stat.mtime|int) - (dotfiles__max_age_in_seconds|int)) > 0
      )
    }}'
  tags: [ 'role::dotfiles:enable' ]

# - debug: var=dotfiles__users_combined

- name: Create tar archive
  command: tar --create --gzip --file "{{ dotfiles__temp_tar_file }}" --directory "{{ dotfiles__source_path }}" .
  args:
    creates: '{{ dotfiles__temp_tar_file }}'
  become: False
  delegate_to: 'localhost'
  when: dotfiles_do_update|bool and dotfiles__copy_mode == 'tar'
  tags: [ 'role::dotfiles:install' ]

- name: Remove old dotfiles to ensure clean unarchive
  file:
    dest: '{{ dotfiles__target_path }}'
    state: 'absent'
  when: dotfiles_do_update|bool and dotfiles__copy_mode == 'tar'
  tags: [ 'role::dotfiles:install' ]

- name: Create target directory
  file:
    dest: '{{ dotfiles__target_path }}'
    state: 'directory'
  when: dotfiles_do_update|bool and dotfiles__copy_mode == 'tar'
  tags: [ 'role::dotfiles:install' ]

- name: Extract tar archive
  unarchive:
    src:  '{{ dotfiles__temp_tar_file }}'
    dest: '{{ dotfiles__target_path }}'
    copy: True
  when: dotfiles_do_update|bool and dotfiles__copy_mode == 'tar' and not ansible_check_mode
  tags: [ 'role::dotfiles:install' ]

- name: Copy over dotfiles
  copy:
    src:  '{{ dotfiles__source_path }}'
    dest: '{{ dotfiles__target_path }}'
  when: dotfiles_do_update|bool and dotfiles__copy_mode != 'tar'
  tags: [ 'role::dotfiles:install' ]

# - name: Fix git remote address
#   git:
#     repo: '{{ dotfiles__source_url }}'
#     dest: '{{ dotfiles__target_path }}'
#     remote: 'upstream'
#     update: False
#     clone: False

# - name: Fix git remote address
#   ini_file:
#     dest: '{{ dotfiles__target_path + "/.git/config" }}'
#     section: 'remote "origin"'
#     option: '        url'
#     value: '{{ item.value|d(omit) }}'
#     state: '{{ item.state|d(omit) }}'
#   with_items:
#     - state: 'absent'
#     - state: 'present'
#       value: '{{ dotfiles__source_url }}'

- name: Fix git remote address
  replace:
    dest: '{{ dotfiles__target_path + "/.git/config" }}'
    regexp: '{{ "url = git@ypid.github.com:ypid/dotfiles.git" | regex_escape() }}'
    replace: 'url = {{ dotfiles__source_url }}'
  when: not ansible_check_mode

- name: Patch git config for older systems
  lineinfile:
    dest: '{{ dotfiles__target_path }}/gitconfig'
    regexp: '{{ item.regexp }}'
    state: '{{ item.state }}'
  when: (
          dotfiles_do_update|bool and
          dotfiles__adopt_gitconfig | bool and (
            (ansible_distribution in [ 'Ubuntu' ] and ansible_distribution_release in [ 'precise' ]) or
            (ansible_distribution in [ 'Linuxmint' ] and ansible_distribution_major_version in [ '16' ])
          )
        )
  with_items:
    - regexp: 'default\s*=\s*simple'
      state: absent
  tags: [ 'role::dotfiles:install' ]

- name: Disable GPG signing in git config
  lineinfile:
    dest: '{{ dotfiles__target_path }}/gitconfig'
    regexp: '{{ item.regexp }}'
    state: '{{ item.state }}'
  when: dotfiles_do_update|bool and dotfiles__adopt_gitconfig|bool
  with_items:
    - regexp: 'gpgsign\s*=\s*true'
      state: absent
  tags: [ 'role::dotfiles:install' ]

- name: Disable mode-mouse in tmux config
  lineinfile:
    dest: '{{ dotfiles__target_path }}/tmux.conf'
    regexp: '{{ item.regexp }}'
    state: '{{ item.state }}'
  when: dotfiles_do_update|bool
  with_items:
    - regexp: 'mode-mouse on'
      state: absent
  tags: [ 'role::dotfiles:install' ]

- name: Disable AppArmor support for Firejail
  replace:
    dest: '{{ dotfiles__target_path }}/firejail-scripts/config_common.sh'
    regexp: ' --apparmor'
  when: not (ansible_cmdline.apparmor|d(0)|string == "1" and ansible_cmdline.security|d("none") == "apparmor")
  tags: [ 'role::dotfiles:install' ]

- name: Patch ackrc for older systems
  replace:
    dest: '{{ dotfiles__target_path }}/ackrc'
    regexp: '^(--ignore-(:?directory|file).*)'
    replace: '# Disabled by Ansible, may not be supported by the installed version:\n# \1'
  when: (
          dotfiles_do_update|bool and
          dotfiles__adopt_ackrc | bool and (
            (ansible_distribution in [ 'Debian' ] and ansible_distribution_release in [ 'wheezy' ]) or
            (ansible_distribution in [ 'Ubuntu' ] and ansible_distribution_release in [ 'precise' ]) or
            (ansible_distribution in [ 'Linuxmint' ] and ansible_distribution_major_version in [ '16' ])
          )
        )
  tags: [ 'role::dotfiles:install' ]

# Works fine on my workstations.
# - name: Disable vim-bad-whitespace in vimrc
#   replace:
#     dest: '{{ dotfiles__target_path }}/vimrc'
#     regexp: '^(\s*)(Bundle ''bitc/vim-bad-whitespace'')$'
#     replace: '\1" Disabled by Ansible, because bug in indent filter:\n\1" \2'
#   tags: [ 'role::dotfiles:install' ]
#   when: not ansible_check_mode

- name: Set permissions for dotfiles
  file:
    path: '{{ dotfiles__target_path }}'
    state: 'directory'
    recurse: yes
    owner: root
    group: root
    mode: 'u=rwX,g=rX,o=rX'
  when: dotfiles_do_update|bool
  tags: [ 'role::dotfiles:install' ]

- name: Create parent directories for dotfiles
  file:
    dest: '{{ (item.home|d("/home/" + (item.user|d(item.name))) + "/" + dotfiles__home_location) | dirname }}'
    state: 'directory'
  become_user: '{{ item.user|d(item.name) }}'
  with_items: '{{ dotfiles__users_combined }}'

- name: Create symbolic link to dotfiles
  file:
    src: '{{ dotfiles__target_path }}'
    dest: '{{ item.home|d("/home/" + (item.user|d(item.name))) + "/" + dotfiles__home_location }}'
    state: 'link'
  become_user: '{{ item.user|d(item.name) }}'
  register: dotfiles__register_symbolic_link
  when: not ansible_check_mode
  with_items: '{{ dotfiles__users_combined }}'

- name: Ensure default configuration files are absent
  file:
    path: '{{ item[1].path }}'
    state: 'absent'
  become_user: '{{ (item[0].item.user|d(item[0].item.name)) }}'
  changed_when: False
  with_nested:
    - '{{ dotfiles__register_symbolic_link.results|d({}) }}'
    -
      - path: '~/.config/htop/htoprc'
      - path: '~/.gnupg/gpg.conf'

- name: Enable dotfiles
  command: ./install
  args:
    chdir: '{{ item.item.home|d("/home/" + (item.item.user|d(item.item.name))) + "/" + dotfiles__home_location }}'
  environment:
    HOME: '{{ item.item.home|d("/home/" + (item.item.user|d(item.item.name))) }}'
  become_user: '{{ (item.item.user|d(item.item.name)) }}'
  register: dotfiles__register_enable
  changed_when: ('Creating' in dotfiles__register_enable.stdout)
  when: dotfiles__users_enabled|bool and (dotfiles_do_update|bool or item|changed)
  with_items: '{{ dotfiles__register_symbolic_link.results|d({}) }}'
  tags: [ 'role::dotfiles:enable' ]
